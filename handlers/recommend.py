from aiogram import Router
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from parsers.cinema_parser import get_films_by_genre

router = Router()

class RecommendState(StatesGroup):
    choosing_genre = State()

@router.message(Command("recommend"))
async def recommend_start(message: Message, state: FSMContext):
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ö–æ–º–µ–¥–∏—è"), KeyboardButton(text="–î—Ä–∞–º–∞")],
            [KeyboardButton(text="–ë–æ–µ–≤–∏–∫"), KeyboardButton(text="–ú–µ–ª–æ–¥—Ä–∞–º–∞")]
        ],
        resize_keyboard=True
    )
    await message.answer("üëã –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∂–∞–Ω—Ä —Ñ–∏–ª—å–º–∞:", reply_markup=keyboard)
    await state.set_state(RecommendState.choosing_genre)

@router.message(RecommendState.choosing_genre)
async def recommend_choose_genre(message: Message, state: FSMContext):
    genre = message.text.strip().lower()

    allowed_genres = ["–∫–æ–º–µ–¥–∏—è", "–¥—Ä–∞–º–∞", "–±–æ–µ–≤–∏–∫", "–º–µ–ª–æ–¥—Ä–∞–º–∞"]

    if genre not in allowed_genres:
        await message.answer("‚ö† –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∂–∞–Ω—Ä –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")
        return

    recommendations = get_films_by_genre(genre)

    if not recommendations:
        await message.answer("üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –º—ã –Ω–µ –Ω–∞—à–ª–∏ —Ñ–∏–ª—å–º–æ–≤ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É.")
        await state.clear()
        return

    response_text = "üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Ñ–∏–ª—å–º–æ–≤ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É:\n\n"
    for rec in recommendations:
        response_text += f"üé¨ *–ù–∞–∑–≤–∞–Ω–∏–µ*: {rec['title']}\nüìñ *–û–ø–∏—Å–∞–Ω–∏–µ*: {rec['description']}\nüìÖ *–ì–æ–¥*: {rec['year']}\n\n"

    await message.answer(response_text, parse_mode="Markdown")
    await state.clear()

def register_handler(dp):
    dp.include_router(router)
